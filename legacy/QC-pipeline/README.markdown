QC-pipeline (legacy)
====================

Deprecated scripts and utilities for running QC pipelines on sequencing data.

There is a core pipeline runner program:

*   `run_pipeline.py`: run a (QC) pipeline script via SGE's `qsub` command,
    to perform QC steps on each pairs of csfasta/qual data files in one or
    more analysis directories.

The core QC scripts are:

*   `solid_qc.sh`: runs the QC pipeline for csfasta and qual file pair
    (fragment mode) or pair of pairs (paired-end mode) generated by a SOLiD
    instrument (solid2fastq, fastq_screen, solid_preprocess_filter and
    qc_boxplotter).

*   `illumina_qc.sh`: runs the QC pipeline for fastq (or fastq.gz) file
    generated by an Illumina instrument (fastq_screen and FASTQC).

There are other scripts which perform QC substeps:

*   `run_solid2fastq.sh`: given a csfasta and qual file pair, generates a
    fastq file by running the `solid2fastq` program.

*   `fastq_screen.sh`: given a fastq file, runs `fastq_screen` against
    three sets of genome indexes, specified by the following `.conf` files:

     * `fastq_screen_model_organisms.conf`
     * `fastq_screen_other_organisms.conf`
     * `fastq_screen_rRNA.conf`

    The location of the `.conf` files is set by the `FASTQ_SCREEN_CONF_DIR`
    variable in `qc.setup` (see below). This script is used by the main
    QC script to run the screens.

*   `solid_preprocess_filter.sh`: given a csfasta and qual file pair, runs
    `SOLiD_preprocess_filter_v2.pl` and outputs the filtered csfasta and qual
    files.

*   `solid_preprocess_truncate_filter.sh`: similar to `solid_preprocess_filter.sh`,
    but performs the truncation step separately from the filtering.

*   `filter_stats.sh`: appends statistics comparing original SOLiD data files
    with the output from the preprocess filter step to a log file.

These also use `functions.sh` and `ngs_utils.sh` from the `share` directory.

Finally there is a reporting utility which generates HTML reports from QC runs:

*   `qcreporter.py`: creates HTML report plus `zip` archive for specified
    QC run directories.

Setup
-----

The QC scripts have an associated setup file called `qc.setup`, which
will be read automatically if it exists. Make a site-specific version by
copying `qc.setup.sample` and editing it as appropriate to specify
locations for the programs and data files.

Outputs from SOLiD QC Pipeline (solid_qc.sh)
--------------------------------------------

For each sample the following output files will be produced by `solid_qc.sh`:

### "Fragment" mode (default) ###

Say that the input SOLiD data file pair is `PB.csfasta` and `PB.qual`, then the
following FASTQ files are produced:

 * `PB.fastq`: all reads
 * `PB_T_F3.csfasta` and `PB_T_F3_QV.qual`: primary data after quality filtering
 * `PB_T_F3.fastq`: reads after quality filtering

### Paired-end mode ###

Say that the input SOLiD data file pairs are `PB_F3.csfasta`, `PB_F3.qual` and
`PB_F5.csfasta`, `PB_F5.qual`, then the following FASTQ files are produced:

#### Unfiltered data ####

Merging all the original unfiltered data into a single fastq gives:

 * `PB_paired.fastq`: all unfiltered F3 and F5 data merged into a single fastq
 * `PB_paired.F3.fastq`: unfiltered F3 data
 * `PB_paired.F5.fastq`: unfiltered F5 data

#### Quality filtered data ####

Quality filtering on the primary data gives:

 * `PB_F3_T_F3.csfasta` and `PB_F3_T_F3_QV.qual`: F3 data after quality filter
 * `PB_F5_T_F3.csfasta` and `PB_F5_T_F3_QV.qual`: F5 data after quality filter

(Note that the files with `F5` in the name only have F5 reads - ignore the `F3`
part of `T_F3`.)

"Lenient" filtering and merging the F3 filtered data with all F5 gives:

 * `PB_paired_F3_filt.fastq`: filtered F3 reads with the matching F5 partner
 * `PB_paired_F3_filt.F3.fastq`: just the F3 reads after filtering
 * `PB_paired_F3_filt.F5.fastq`: just the matching F5 partners

(This is called "lenient" as only the quality of the F3 reads is considered.)

"Strict" filtering and merging gives:

 * `PB_paired_F3_and_F5_filt.fastq`: filtered F3 reads and filtered F5 reads,
   with "unpartnered" reads removed
 * `PB_paired_F3_and_F5_filt.F3.fastq`: just the F3 reads
 * `PB_paired_F3_and_F5_filt.F5.fastq`: just the F5 reads

(This is called "strict" filtering as a pair of reads will be rejected on the
quality of either of the F3 or F5 components.)

### Filtering statistics ###

The filtering statistics output file name depends on the mode that the pipeline
was run using:

 * `SOLiD_preprocess_filter.stats`: for fragment mode
 * `SOLiD_preprocess_filter_paired.stats`: for paired end mode

In each case the file summarises the number of reads before and after filtering
and merging, and indicates the percentage that have been filtered out (with
typical values being between 20-30%).

### Contamination screens (`fastq_screen.sh`) ###

Contamination screen outputs are written to the `qc` directory:

 * `PB_model_organisms_screen.*`: screen against a selection of commonly used genomes
 * `PB_other_organisms_screen.*`: screen against a selection of less common genomes
 * `PB_rRNA_screen.*`: screen against a selection of rRNAs

For each there are `.txt` and `.png` files.

### Boxplots (`qc_boxplotter.sh`) ###

Boxplots are written to the `qc` subdirectory:

 * `PB.qual_seq-order_boxplot.*`: plot using all reads (PDF, PNG and PS formats)
 * `PB_T_F3_QV.qual_seq-order_boxplot.*`: plot using just the quality filtered reads

Outputs from Illumina QC Pipeline (illumina_qc.sh)
--------------------------------------------------

For each sample the `illumina_qc.sh` generates fastq_screen plots for model
organisms, other organisms and rRNAs plus the report files from FASTQC.

If the input files are `fastq.gz` then it will also produce gunzipped versions
of the files (specify the `--no-gunzip` option to turn off this behaviour).

This script can be run on data produced by the Illumina GAIIx and HiSeq platforms.

Pipeline runner: run_qc_pipeline.py
-----------------------------------

### Overview ###

The pipeline runner program `run_qc_pipeline.py` is designed to automate running
a specified script for all available datasets in one or more directories.

Datasets are assembled in an automated fashion by examining and grouping files in
a given directory based on their file names and file extensions. The specified
script is then run for each of the datasets, using the specified job runner to
handle execution and monitoring for each run. The master pipeline runner performs
overall monitoring, basic scheduling and reporting of jobs.

*   The `--input` and `--regex` options control the assembly of datasets
*   The `--runner` option controls which job runner is used
*   The `--limit` and `--email` options control scheduling and reporting

See below for more information on these options.

### Usage and options ###

Usage:

     run_qc_pipeline.py [options] SCRIPT DIR [ DIR ...]

Execute SCRIPT on data in each directory DIR. By default the SCRIPT is
executed on each CSFASTA/QUAL file pair found in DIR, as 'SCRIPT CSFASTA
QUAL'. Use the --input option to run SCRIPT on different types of data (e.g.
FASTQ files). SCRIPT can be a quoted string to include command line options
(e.g. 'run_solid2fastq.sh --gzip').

Options:

    -h, --help            show this help message and exit

Basic Options:

    --limit=MAX_CONCURRENT_JOBS
                        queue no more than MAX_CONCURRENT_JOBS at one time
                        (default 4)
    --queue=GE_QUEUE    explicitly specify Grid Engine queue to use
    --input=INPUT_TYPE  specify type of data to use as input for the script.
                        INPUT_TYPE can be one of: 'solid' (CSFASTA/QUAL file
                        pair, default), 'solid_paired_end' (CSFASTA/QUAL_F3
                        and CSFASTA/QUAL_F5 quartet), 'fastq' (FASTQ file),
                        'fastqgz' (gzipped FASTQ file)
    --email=EMAIL_ADDR  send email to EMAIL_ADDR when each stage of the
                        pipeline is complete

Advanced Options:

    --regexp=PATTERN    regular expression to match input files against
    --test=MAX_TOTAL_JOBS
                        submit no more than MAX_TOTAL_JOBS (otherwise submit
                        all jobs)
    --runner=RUNNER     specify how jobs are executed: ge = Grid Engine, drmma
                        = Grid Engine via DRMAA interface, simple = use local
                        system. Default is 'ge'
    --debug             print debugging output

### Pipeline recipes/examples ###

*   Run the full SOLiD QC pipeline on a set of directories:

    `run_qc_pipeline.py solid_qc.sh <dir1> <dir2> ...`

*   Run the SOLiD QC pipeline on paired-end data:

    `run_qc_pipeline.py --input=solid_paired_end solid_qc.sh <dir1> <dir2> ...`

*   Run the Illumina QC pipeline on fastq.gz files in a set of directories:

    `run_qc_pipeline.py --input=fastqgz illumina_qc.sh <dir1> <dir2> ...`

*   Generate gzipped fastq files only in a set of directories:

    `run_qc_pipeline.py "run_solid2fastq.sh --gzip" <dir1> <dir2> ...`

*   Run the fastq_screen steps only on a set of directories:

    `run_qc_pipeline.py --input=fastq fastq_screen.sh <dir1> <dir2> ...`

*   Run the SOLiD preprocess filter steps only on a set of directories:

    `run_qc_pipeline.py solid_preprocess_filter.sh <dir1> <dir2> ...`

*   To get an email notification on completion of the pipeline:

    `run_qc_pipeline.py --email=foo@bar.com ...`


Reporting: qcreporter.py
------------------------

### Overview ###

`qcreporter.py` generates HTML reports for QC. It can be run on the outputs from
either `solid_qc.sh` or `illumina_qc.sh` scripts and will try to determine the
platform and run type automatically.

In some cases this automatic detection may fail, in which case the `--platform`
and `--format` options can be used to explicit speciy the platform type and/or
the type of input files that are expected; see the section on "Reporting
recipes" below.

### Usage and options ###

Usage:

    qcreporter.py [options] DIR [ DIR ...]

Generate QC report for each directory DIR which contains the outputs from a QC
script (either SOLiD or Illumina). Creates a 'qc_report.<run>.<name>.html'
file in DIR plus an archive 'qc_report.<run>.<name>.zip' which contains the
HTML plus all the necessary files for unpacking and viewing elsewhere.

Options:

    -h, --help            show this help message and exit
    --platform=PLATFORM   explicitly set the type of sequencing platform
                          ('solid', 'illumina')
    --format=DATA_FORMAT  explicitly set the format of files ('solid',
                          'solid_paired_end', 'fastq', 'fastqgz')
    --qc_dir=QC_DIR       specify a different name for the QC results
                          subdirectory (default is 'qc')
    --verify              don't generate report, just verify the QC outputs
    --regexp=PATTERN      select subset of files which match regular expression
                          PATTERN

### Reporting recipes ###

The table below indicates the situations in which the reporter should work
automatically, and which options to use in cases when it doesn't:

    +==========+============+============+=============================+
    | Platform | Data type  | QC mode    | Autodetect?                 |
    +==========+============+============+=============================+
    | SOLiD4   | Fragment   | Fragment   | Yes                         |
    | SOLiD4   | Paired-end | Fragment   | Yes                         |
    | SOLiD4   | Paired-end | Paired-end | Yes                         |
    | GA2x     | Fastq.gz   | n/a        | Yes                         |
    | GA2x     | Fastq      | n/a        | No: use --format=fastq      |
    | HiSeq    | Fastq.gz   | n/a        | No: use --platform=illumina |
    | HiSeq    | Fastq      | n/a        | No: use --platform=illumina |
    |          |            |            |         --format=fastq      |
    +==========+============+============+=============================+
