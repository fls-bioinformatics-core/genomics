#     SolidData.py: module for handling data about SOLiD sequencer runs
#     Copyright (C) University of Manchester 2011-2024 Peter Briggs
#
########################################################################
#
# SolidData.py
#
#########################################################################

"""
Legacy module providing classes for extracting data about SOLiD runs
from directory structure, data files and naming conventions.

The functionality of the module has been moved to the 'platforms.solid.data'
module, which supersedes this one. This module is now deprecated and
will be removed in a future release.

The legacy classes have been reimplemented as wrappers to the classes
in the newer module, to preserve backwards compatibility.

"""

#######################################################################
# Import modules that this module depends on
#######################################################################

from .platforms.solid import data as solid

#######################################################################
# Class definitions
#######################################################################

class SolidRun(solid.RunDir):
    """
    Describe a SOLiD run.
    """
    def __init__(self,solid_run_dir):
        """Create and populate a new SolidRun instance.

        Arguments:
          solid_run_dir (str): path to the top-level directory holding
            the files generated by the SOLiD sequencer run e.g.
            '/path/to/SOLiD/data/solid0123_20130426_FRAG_BC'
        """
        solid.RunDir.__init__(self, solid_run_dir,
                              classes=
                              dict(BarcodeStatistics=SolidBarcodeStatistics,
                                   Library=SolidLibrary,
                                   RunDefinition=SolidRunDefinition,
                                   RunInfo=SolidRunInfo,
                                   Sample=SolidSample))

    def fetchLibraries(self, sample_name='*', library_name='*'):
        """
        Retrieve libraries based on sample and library names
        """
        return solid.RunDir.fetch_libraries(self,
                                            sample_name=sample_name,
                                            library_name=library_name)

    def slideLayout(self):
        """
        Return description of the slide layout
        """
        return solid.RunDir.slide_layout(self)


class SolidSample(solid.Sample):
    """
    Store information about a sample in a SOLiD run.

    Arguments:
      name (str): name of the sample (e.g. AS_XC_pool)
      parent_run (SolidRun): (optional) the parent SolidRun object
    """
    def __init__(self, name, parent_run=None):
        solid.Sample.__init__(self, name, parent_run=parent_run,
                              classes=dict(Library=SolidLibrary,
                                           Project=SolidProject))

    def addLibrary(self, library_name):
        """
        Associate a library with the sample
        """
        return solid.Sample.add_library(self, library_name)

    def getLibrary(self, library_name):
        """
        Look up library object matching a library name
        """
        return solid.Sample.get_library(self, library_name)

    def getProject(self, project_name):
        """
        Look up project object matching a project name
        """
        return solid.Sample.get_project(self, project_name)


class SolidLibrary(solid.Library):
    """
    Store information about a SOLiD library.

    Arguments:
      name (str): name of the library (e.g. AS_07)
      parent_sample (SolidSample): (optional) parent SolidSample
        object
    """
    def __init__(self,name,parent_sample=None):
        solid.Library.__init__(self, name, parent_sample=parent_sample,
                               classes=dict(PrimaryData=SolidPrimaryData,
                                            Project=SolidProject))

    def addPrimaryData(self, csfasta, qual):
        """
        Add reference to primary data to the library
        """
        return solid.Library.add_primary_data(self, csfasta, qual)


class SolidPrimaryData(solid.PrimaryData):
    """
    Class to store references to primary data files
    """
    def __init__(self):
        solid.PrimaryData.__init__(self)


class SolidProject(solid.Project):
    """
    Class to hold information about a SOLiD 'project'

    Arguments:
      name (str): the name of the project.
      run (SolidRun): (optional) the parent SolidRun for the
        project
      sample (SolidSample): (optional) the parent SolidSample
        for the project
    """
    def __init__(self,name,run=None,sample=None):
        solid.Project.__init__(self, name, run=run, sample=sample)

    def addLibrary(self,library):
        """
        Add a library to the project.
        """
        return solid.Project.add_library(self, library)

    def getSample(self):
        """
        Return the parent sample for the project.
        """
        return solid.Project.get_sample(self)

    def getRun(self):
        """
        Return the parent run for the project.
        """
        return solid.Project.get_run(self)

    def isBarcoded(self):
        """
        Return boolean indicating if the libraries are barcoded.
        """
        return solid.Project.is_barcoded(self)

    def getLibraryNamePattern(self):
        """
        Return wildcard pattern matching all library names in the project.
        """
        return solid.Project.get_library_name_pattern(self)

    def getProjectName(self):
        """
        Return a name for the project.
        """
        return solid.Project.get_project_name(self)

    def prettyPrintLibraries(self):
        """
        Return a nicely formatted string describing the library names
        """
        return solid.Project.pretty_print_libraries(self)

    def getTimeStamps(self):
        """
        Return a list of timestamps for primary data
        """
        return solid.Project.get_timestamps(self)


class SolidRunInfo(solid.RunInfo):
    """
    Extract data about a run from the run name

    Arguments:
      run_name: the name of the run, e.g. solid0123_20130426_FRAG_BC_2.
        NB this is not a path to a run directory
    """
    def __init__(self,run_name):
        solid.RunInfo.__init__(self, run_name=run_name)


class SolidRunDefinition(solid.RunDefinition):
    """
    Class to store data from a SOLiD run definition file

    Arguments:
      run_definition_file (str): name of run definition file (including
        any leading path) from which to extract data
    """

    def __init__(self,run_definition_file):
        solid.RunDefinition.__init__(self,
                                     run_definition_file=\
                                     run_definition_file)

    def nSamples(self):
        """
        Return the number of samples
        """
        return solid.RunDefinition.n_samples(self)

    def getDataItem(self, field, i):
        """
        Return data item from specified row
        """
        return solid.RunDefinition.get_data_item(self, field, i)


class SolidBarcodeStatistics(solid.BarcodeStatistics):
    """
    Store data from a SOLiD BarcodeStatistics file
    """

    def __init__(self,barcode_statistics_file):
        solid.BarcodeStatistics.__init__(self,
                                   barcode_statistics_file=\
                                   barcode_statistics_file)

    def nRows(self):
        """
        Return the number of rows
        """
        return solid.BarcodeStatistics.n_rows(self)

    def getDataByName(self, name):
        """
        Return a row of data matching 'name'
        """
        return solid.BarcodeStatistics.get_data_by_name(self, name)

    def totalReads(self):
        """
        Return the total reads
        """
        return solid.BarcodeStatistics.total_reads(self)

#######################################################################
# Function definitions
#######################################################################

def list_run_directories(solid_run_dir):
    """
    Return list of matching run directories
    """
    return solid.list_run_directories(solid_run_dir)

def is_paired_end(solid_run):
    """
    Determine if a SolidRun instance is a paired-end run
    """
    return solid.is_paired_end(solid_run)

def get_primary_data_file_pair(dirn):
    """
    Return csfasta/qual file pair from specified directory
    """
    return solid.get_primary_data_file_pair(dirn)

def extract_library_timestamp(path):
    """
    Extract the timestamp string from a path
    """
    return solid.extract_library_timestamp(path)

def match(pattern,word):
    """
    Check if a word matches pattern
    """
    return solid.match(pattern,word)

def slide_layout(n_samples):
    """
    Description of the slide layout based on number of samples
    """
    return solid.slide_layout(n_samples)
