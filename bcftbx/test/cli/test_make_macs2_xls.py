#######################################################################
# Tests
#######################################################################

import unittest
import io
from bcftbx.cli.make_macs2_xls import MacsXLS
from bcftbx.cli.make_macs2_xls import chunk
from bcftbx.cli.make_macs2_xls import bed_for_macs2
from bcftbx.cli.make_macs2_xls import xls_for_macs2

MACS140beta_data = u"""# This file is generated by MACS version 1.4.0beta
# ARGUMENTS LIST:
# name = AS_Rb_Pmad_2_vs_Rb_PI_2_mfold_10-30_Plt1e-5_bw350_MACS14
# format = BED
# ChIP-seq file = solid0424_20101108_FRAG_BC_2_AS_COMBINED_F3_AS_Rb_Pmad_2.unique.csfasta.ma.50.5.bed
# control file = solid0424_20101108_FRAG_BC_2_AS_COMBINED_F3_AS_Rb_PI_2.unique.csfasta.ma.50.5.bed
# effective genome size = 1.20e+08
# band width = 350
# model fold = 10,30
# pvalue cutoff = 1.00e-05
# Range for calculating regional lambda is: 1000 bps and 10000 bps

# tag size is determined as 50 bps
# total tags in treatment: 9541851
# tags after filtering in treatment: 6005978
# maximum duplicate tags at the same position in treatment = 3
# Redundant rate in treatment: 0.37
# total tags in control: 10600387
# tags after filtering in control: 5190513
# maximum duplicate tags at the same position in control = 3
# Redundant rate in control: 0.51
# d = 200
chr	start	end	length	summit	tags	-10*log10(pvalue)	fold_enrichment	FDR(%)
chr2L	25639	29124	3486	2465	411	297.14	4.72	68.59
chr2L	66243	67598	1356	674	158	156.31	3.73	83.24
chr2L	88564	93752	5189	2934	933	1556.88	7.94	23.40
chr2L	99358	100787	1430	450	142	84.72	4.03	81.71
chr2L	248030	252120	4091	1126	621	129.90	3.97	86.04"""

MACS2010_20130419_data = u"""# This file is generated by MACS version 2.0.10.20130419 (tag:beta)
# ARGUMENTS LIST:
# name = Gli1_ChIP_vs_input_36bp_bowtie_mm10_BASE_mfold5,50_Pe-5_Q0.05_bw250_MACS2
# format = BED
# ChIP-seq file = ['Gli1_ChIP_NH1_36bp.fastq_bowtie_m1n2l28_mm10_random_chrM_chrUn_sorted_BASE.bed']
# control file = ['Gli1_Input_NH2_36bp.fastq_bowtie_m1n2l28_mm10_random_chrM_chrUn_sorted_BASE.bed']
# effective genome size = 1.87e+09
# band width = 250
# model fold = [5, 50]
# qvalue cutoff = 5.00e-02
# Larger dataset will be scaled towards smaller dataset.
# Range for calculating regional lambda is: 1000 bps and 10000 bps
# Broad region calling is off

# tag size is determined as 36 bps
# total tags in treatment: 22086203
# tags after filtering in treatment: 5306676
# maximum duplicate tags at the same position in treatment = 1
# Redundant rate in treatment: 0.76
# total tags in control: 24403248
# tags after filtering in control: 15259969
# maximum duplicate tags at the same position in control = 1
# Redundant rate in control: 0.37
# d = 148
# alternative fragment length(s) may be 148 bps
chr	start	end	length	abs_summit	pileup	-log10(pvalue)	fold_enrichment	-log10(qvalue)	name
chr1	11739723	11739870	148	11739812	7.00000	7.76684	5.62653	3.43962	Gli1_ChIP_vs_input_36bp_bowtie_mm10_BASE_mfold5,50_Pe-5_Q0.05_bw250_MACS2_peak_1
chr1	11969836	11970017	182	11969905	12.00000	14.83738	9.14312	9.72638	Gli1_ChIP_vs_input_36bp_bowtie_mm10_BASE_mfold5,50_Pe-5_Q0.05_bw250_MACS2_peak_2
chr1	12644697	12644846	150	12644743	8.00000	9.09804	6.32985	4.55480	Gli1_ChIP_vs_input_36bp_bowtie_mm10_BASE_mfold5,50_Pe-5_Q0.05_bw250_MACS2_peak_3
chr1	14307437	14307618	182	14307533	9.00000	10.15992	6.87334	5.55297	Gli1_ChIP_vs_input_36bp_bowtie_mm10_BASE_mfold5,50_Pe-5_Q0.05_bw250_MACS2_peak_4
chr1	14729977	14730124	148	14730003	9.00000	10.47462	7.03317	5.76536	Gli1_ChIP_vs_input_36bp_bowtie_mm10_BASE_mfold5,50_Pe-5_Q0.05_bw250_MACS2_peak_5"""

MACS2010_20131216_data = u"""# This file is generated by MACS version 2.0.10.20131216 (tag:beta)
# Command line: callpeak --treatment=NW-H3K27ac-chIP_E13.5_50bp_bowtie_m1n2l28_mm10_random_chrM_chrUn_sorted_BASE.bed --control=NW-H3K27ac-input_E13.5_50bp_bowtie_m1n2l28_mm10_random_chrM_chrUn_sorted_BASE.bed --name=NW-H3K27ac-chIP_vs_input_E13.5_50bp_bowtie_mm10_BASE_q0.05_bw300_mfold5to50_MACS2.0.10b --format=BED --gsize=mm --bw=300 --qvalue=0.05 --mfold 5 50
# ARGUMENTS LIST:
# name = NW-H3K27ac-chIP_vs_input_E13.5_50bp_bowtie_mm10_BASE_q0.05_bw300_mfold5to50_MACS2.0.10b
# format = BED
# ChIP-seq file = ['NW-H3K27ac-chIP_E13.5_50bp_bowtie_m1n2l28_mm10_random_chrM_chrUn_sorted_BASE.bed']
# control file = ['NW-H3K27ac-input_E13.5_50bp_bowtie_m1n2l28_mm10_random_chrM_chrUn_sorted_BASE.bed']
# effective genome size = 1.87e+09
# band width = 300
# model fold = [5, 50]
# qvalue cutoff = 5.00e-02
# Larger dataset will be scaled towards smaller dataset.
# Range for calculating regional lambda is: 1000 bps and 10000 bps
# Broad region calling is off

# tag size is determined as 50 bps
# total tags in treatment: 34761982
# tags after filtering in treatment: 25719667
# maximum duplicate tags at the same position in treatment = 1
# Redundant rate in treatment: 0.26
# total tags in control: 35952332
# tags after filtering in control: 32648707
# maximum duplicate tags at the same position in control = 1
# Redundant rate in control: 0.09
# d = 255
# alternative fragment length(s) may be 255 bps
chr	start	end	length	abs_summit	pileup	-log10(pvalue)	fold_enrichment	-log10(qvalue)	name
chr1	4785302	4786361	1060	4785978	31.00	19.45588	7.09971	16.36880	NW-H3K27ac-chIP_vs_input_E13.5_50bp_bowtie_mm10_BASE_q0.05_bw300_mfold5to50_MACS2.0.10b_peak_1
chr1	4857168	4857694	527	4857404	29.00	17.54599	6.65598	14.52698	NW-H3K27ac-chIP_vs_input_E13.5_50bp_bowtie_mm10_BASE_q0.05_bw300_mfold5to50_MACS2.0.10b_peak_2
chr1	4858211	4858495	285	4858423	18.00	8.17111	4.21545	5.55648	NW-H3K27ac-chIP_vs_input_E13.5_50bp_bowtie_mm10_BASE_q0.05_bw300_mfold5to50_MACS2.0.10b_peak_3
chr1	5082969	5083594	626	5083453	21.00	10.51344	4.88105	7.78195	NW-H3K27ac-chIP_vs_input_E13.5_50bp_bowtie_mm10_BASE_q0.05_bw300_mfold5to50_MACS2.0.10b_peak_4
chr1	6214126	6215036	911	6214792	56.00	47.04091	12.64636	43.11036	NW-H3K27ac-chIP_vs_input_E13.5_50bp_bowtie_mm10_BASE_q0.05_bw300_mfold5to50_MACS2.0.10b_peak_5"""

MACS2010_20131216_broad_data = u"""# This file is generated by MACS version 2.0.10.20131216 (tag:beta)
# Command line: callpeak --treatment=NW-H3K27ac-chIP_E13.5_50bp_bowtie_m1n2l28_mm10_random_chrM_chrUn_sorted_BASE.bed --control=NW-H3K27ac-input_E13.5_50bp_bowtie_m1n2l28_mm10_random_chrM_chrUn_sorted_BASE.bed --name=NW-H3K27ac-chIP_vs_input_E13.5_50bp_bowtie_mm10_BASE_q0.05_bw300_mfold5to50_broad_MACS2.0.10b --format=BED --gsize=mm --bw=300 --qvalue=0.05 --mfold 5 50 --broad --bdg
# ARGUMENTS LIST:
# name = NW-H3K27ac-chIP_vs_input_E13.5_50bp_bowtie_mm10_BASE_q0.05_bw300_mfold5to50_broad_MACS2.0.10b
# format = BED
# ChIP-seq file = ['NW-H3K27ac-chIP_E13.5_50bp_bowtie_m1n2l28_mm10_random_chrM_chrUn_sorted_BASE.bed']
# control file = ['NW-H3K27ac-input_E13.5_50bp_bowtie_m1n2l28_mm10_random_chrM_chrUn_sorted_BASE.bed']
# effective genome size = 1.87e+09
# band width = 300
# model fold = [5, 50]
# qvalue cutoff = 5.00e-02
# Larger dataset will be scaled towards smaller dataset.
# Range for calculating regional lambda is: 1000 bps and 10000 bps
# Broad region calling is on

# tag size is determined as 50 bps
# total tags in treatment: 34761982
# tags after filtering in treatment: 25719667
# maximum duplicate tags at the same position in treatment = 1
# Redundant rate in treatment: 0.26
# total tags in control: 35952332
# tags after filtering in control: 32648707
# maximum duplicate tags at the same position in control = 1
# Redundant rate in control: 0.09
# d = 255
# alternative fragment length(s) may be 255 bps
chr	start	end	length	pileup	-log10(pvalue)	fold_enrichment	-log10(qvalue)	name
chr1	4571604	4572035	432	11.81	4.00624	2.84289	1.70591	NW-H3K27ac-chIP_vs_input_E13.5_50bp_bowtie_mm10_BASE_q0.05_bw300_mfold5to50_broad_MACS2.0.10b_peak_1
chr1	4784978	4786450	1473	19.42	9.53551	4.45015	6.90879	NW-H3K27ac-chIP_vs_input_E13.5_50bp_bowtie_mm10_BASE_q0.05_bw300_mfold5to50_broad_MACS2.0.10b_peak_2
chr1	4857160	4858622	1463	18.48	8.80420	4.28339	6.20234	NW-H3K27ac-chIP_vs_input_E13.5_50bp_bowtie_mm10_BASE_q0.05_bw300_mfold5to50_broad_MACS2.0.10b_peak_3
chr1	5082969	5083609	641	16.57	7.03857	3.82006	4.50602	NW-H3K27ac-chIP_vs_input_E13.5_50bp_bowtie_mm10_BASE_q0.05_bw300_mfold5to50_broad_MACS2.0.10b_peak_4
chr1	6214118	6215462	1345	25.10	15.08276	5.78500	12.23221	NW-H3K27ac-chIP_vs_input_E13.5_50bp_bowtie_mm10_BASE_q0.05_bw300_mfold5to50_broad_MACS2.0.10b_peak_5"""

class TestMacsXLSForMacs140beta(unittest.TestCase):
    def test_load_macs14_xls_file(self):
        """Load data from MACS14 variant

        """
        macsxls = MacsXLS(fp=io.StringIO(MACS140beta_data))
        self.assertEqual(macsxls.macs_version,"1.4.0beta")
        self.assertEqual(macsxls.name,
                         "AS_Rb_Pmad_2_vs_Rb_PI_2_mfold_10-30_Plt1e-5_bw350_MACS14")
        self.assertEqual(macsxls.command_line,None)
        self.assertFalse(macsxls.with_broad_option)
        self.assertEqual(macsxls.columns,["order","chr","start","end","length","summit","tags",
                                          "-10*log10(pvalue)","fold_enrichment","FDR(%)"])
        self.assertEqual(len(macsxls.data),5)
        for i in range(0,5):
            self.assertEqual(macsxls.data[i]['order'],i+1)

    def test_sort_on_columns(self):
        """Check sorting for MACS14 variant data

        """
        macsxls = MacsXLS(fp=io.StringIO(MACS140beta_data))
        for line,value in zip(macsxls.data,(25639,66243,88564,99358,248030)):
            self.assertEqual(line['start'],value)
        macsxls.sort_on("start")
        for line,value in zip(macsxls.data,(248030,99358,88564,66243,25639)):
            self.assertEqual(line['start'],value)

class TestMacsXLSForMacs2010_20131216(unittest.TestCase):
    def test_load_macs2_xls_file(self):
        """Load data from MACS2.0.10.20131216

        """
        macsxls = MacsXLS(fp=io.StringIO(MACS2010_20131216_data))
        self.assertEqual(macsxls.macs_version,"2.0.10.20131216")
        self.assertEqual(macsxls.name,
                         "NW-H3K27ac-chIP_vs_input_E13.5_50bp_bowtie_mm10_BASE_q0.05_bw300_mfold5to50_MACS2.0.10b")
        self.assertEqual(macsxls.command_line,"callpeak --treatment=NW-H3K27ac-chIP_E13.5_50bp_bowtie_m1n2l28_mm10_random_chrM_chrUn_sorted_BASE.bed --control=NW-H3K27ac-input_E13.5_50bp_bowtie_m1n2l28_mm10_random_chrM_chrUn_sorted_BASE.bed --name=NW-H3K27ac-chIP_vs_input_E13.5_50bp_bowtie_mm10_BASE_q0.05_bw300_mfold5to50_MACS2.0.10b --format=BED --gsize=mm --bw=300 --qvalue=0.05 --mfold 5 50")
        self.assertFalse(macsxls.with_broad_option)
        self.assertEqual(macsxls.columns,["order","chr","start","end","length","abs_summit",
                                          "pileup",
                                          "-log10(pvalue)","fold_enrichment",
                                          "-log10(qvalue)","name"])
        self.assertEqual(len(macsxls.data),5)
        for i in range(0,5):
            self.assertEqual(macsxls.data[i]['order'],i+1)

    def test_sort_on_columns(self):
        """Check sorting for MACS2.0.10.20131216 data

        """
        macsxls = MacsXLS(fp=io.StringIO(MACS2010_20131216_data))
        for line,value in zip(macsxls.data,(31.00,29.00,18.00,21.00,56.00)):
            self.assertEqual(line['pileup'],value)
        macsxls.sort_on("pileup")
        for line,value in zip(macsxls.data,(56.00,31.00,29.00,21.00,18.00)):
            self.assertEqual(line['pileup'],value)

class TestMacsXLSForMacs2010_20131216_broad(unittest.TestCase):
    def test_load_macs2_xls_file(self):
        """Load data from MACS2.0.10.20131216 (--broad option)

        """
        macsxls = MacsXLS(fp=io.StringIO(MACS2010_20131216_broad_data))
        self.assertEqual(macsxls.macs_version,"2.0.10.20131216")
        self.assertEqual(macsxls.name,
                         "NW-H3K27ac-chIP_vs_input_E13.5_50bp_bowtie_mm10_BASE_q0.05_bw300_mfold5to50_broad_MACS2.0.10b")
        self.assertEqual(macsxls.command_line,"callpeak --treatment=NW-H3K27ac-chIP_E13.5_50bp_bowtie_m1n2l28_mm10_random_chrM_chrUn_sorted_BASE.bed --control=NW-H3K27ac-input_E13.5_50bp_bowtie_m1n2l28_mm10_random_chrM_chrUn_sorted_BASE.bed --name=NW-H3K27ac-chIP_vs_input_E13.5_50bp_bowtie_mm10_BASE_q0.05_bw300_mfold5to50_broad_MACS2.0.10b --format=BED --gsize=mm --bw=300 --qvalue=0.05 --mfold 5 50 --broad --bdg")
        self.assertTrue(macsxls.with_broad_option)
        self.assertEqual(macsxls.columns,["order","chr","start","end","length","pileup",
                                          "-log10(pvalue)","fold_enrichment",
                                          "-log10(qvalue)","name"])
        self.assertEqual(len(macsxls.data),5)
        for i in range(0,5):
            self.assertEqual(macsxls.data[i]['order'],i+1)

    def test_sort_on_columns(self):
        """Check sorting for MACS2.0.10.20131216 data (--broad option)

        """
        macsxls = MacsXLS(fp=io.StringIO(MACS2010_20131216_broad_data))
        for line,value in zip(macsxls.data,(11.81,19.42,18.48,16.57,25.10)):
            self.assertEqual(line['pileup'],value)
        macsxls.sort_on("pileup")
        for line,value in zip(macsxls.data,(25.10,19.42,18.48,16.57,11.81)):
            self.assertEqual(line['pileup'],value)

class TestMacsXLSForMacs2010_20130419(unittest.TestCase):
    def test_load_macs2_xls_file(self):
        """Load data from MACS2.0.10.20130419

        """
        macsxls = MacsXLS(fp=io.StringIO(MACS2010_20130419_data))
        self.assertEqual(macsxls.macs_version,"2.0.10.20130419")
        self.assertEqual(macsxls.name,
                         "Gli1_ChIP_vs_input_36bp_bowtie_mm10_BASE_mfold5,50_Pe-5_Q0.05_bw250_MACS2")
        self.assertEqual(macsxls.command_line,None)
        self.assertFalse(macsxls.with_broad_option)
        self.assertEqual(macsxls.columns,["order","chr","start","end","length","abs_summit",
                                          "pileup",
                                          "-log10(pvalue)","fold_enrichment",
                                          "-log10(qvalue)","name"])
        self.assertEqual(len(macsxls.data),5)
        for i in range(0,5):
            self.assertEqual(macsxls.data[i]['order'],i+1)

    def test_sort_on_columns(self):
        """Check sorting for MACS2.0.10.20130419 data

        """
        macsxls = MacsXLS(fp=io.StringIO(MACS2010_20130419_data))
        for line,value in zip(macsxls.data,(7.00000,12.00000,8.00000,9.00000,9.00000)):
            self.assertEqual(line['pileup'],value)
        macsxls.sort_on("pileup")
        for line,value in zip(macsxls.data,(12.00000,9.00000,9.00000,8.00000,7.00000)):
            self.assertEqual(line['pileup'],value)

class TestXlsForMacs2Function(unittest.TestCase):

    def test_xls_for_macs2_with_2010_20130419(self):
        """Generate XLSWorkBook for MACS2.0.10.20130419 data

        """
        macsxls = MacsXLS(fp=io.StringIO(MACS2010_20130419_data))
        xls = xls_for_macs2(macsxls)
        for sheet,title in zip(xls.worksheet,('data','notes','legends')):
            self.assertEqual(sheet,title)
        data = xls.worksheet['data']
        # Check header
        self.assertEqual(data['A1'],'#order')
        self.assertEqual(data['B1'],'chr')
        self.assertEqual(data['C1'],'start')
        self.assertEqual(data['D1'],'end')
        self.assertEqual(data['E1'],'chr')
        self.assertEqual(data['F1'],'abs_summit-100')
        self.assertEqual(data['G1'],'abs_summit+100')
        self.assertEqual(data['H1'],'chr')
        self.assertEqual(data['I1'],'summit-1')
        self.assertEqual(data['J1'],'summit')
        self.assertEqual(data['K1'],'length')
        self.assertEqual(data['L1'],'abs_summit')
        self.assertEqual(data['M1'],'pileup')
        self.assertEqual(data['N1'],'-log10(pvalue)')
        self.assertEqual(data['O1'],'fold_enrichment')
        self.assertEqual(data['P1'],'-log10(qvalue)')
        # Check first line of data
        self.assertEqual(data['A2'],1)
        self.assertEqual(data['B2'],'chr1')
        self.assertEqual(data['C2'],11969836)
        self.assertEqual(data['D2'],11970017)
        self.assertEqual(data.render_cell('E2'),'=B2')
        self.assertEqual(data.render_cell('F2'),'=L2-100')
        self.assertEqual(data.render_cell('G2'),'=L2+100')
        self.assertEqual(data.render_cell('H2'),'=B2')
        self.assertEqual(data.render_cell('I2'),'=L2-1')
        self.assertEqual(data.render_cell('J2'),'=L2')
        self.assertEqual(data['K2'],182)
        self.assertEqual(data['L2'],11969905)
        self.assertEqual(data['M2'],12)
        self.assertEqual(data['N2'],14.83738)
        self.assertEqual(data['O2'],9.14312)
        self.assertEqual(data['P2'],9.72638)
        # Check last line of data
        self.assertEqual(data['A6'],5)
        self.assertEqual(data['B6'],'chr1')
        self.assertEqual(data['C6'],11739723)
        self.assertEqual(data['D6'],11739870)
        self.assertEqual(data.render_cell('E6'),'=B6')
        self.assertEqual(data.render_cell('F6'),'=L6-100')
        self.assertEqual(data.render_cell('G6'),'=L6+100')
        self.assertEqual(data.render_cell('H6'),'=B6')
        self.assertEqual(data.render_cell('I6'),'=L6-1')
        self.assertEqual(data.render_cell('J6'),'=L6')
        self.assertEqual(data['K6'],148)
        self.assertEqual(data['L6'],11739812)
        self.assertEqual(data['M6'],7)
        self.assertEqual(data['N6'],7.76684)
        self.assertEqual(data['O6'],5.62653)
        self.assertEqual(data['P6'],3.43962)
        # Check order of fold enrichment column
        self.assertEqual(data['O2'],9.14312)
        self.assertEqual(data['O3'],7.03317)
        self.assertEqual(data['O4'],6.87334)
        self.assertEqual(data['O5'],6.32985)
        self.assertEqual(data['O6'],5.62653)

    def test_xls_for_macs2_with_2010_20131216(self):
        """Generate XLSWorkBook for MACS2.0.10.20131216 data

        """
        macsxls = MacsXLS(fp=io.StringIO(MACS2010_20131216_data))
        xls = xls_for_macs2(macsxls)
        for sheet,title in zip(xls.worksheet,('data','notes','legends')):
            self.assertEqual(sheet,title)
        data = xls.worksheet['data']
        # Check header
        self.assertEqual(data['A1'],'#order')
        self.assertEqual(data['B1'],'chr')
        self.assertEqual(data['C1'],'start')
        self.assertEqual(data['D1'],'end')
        self.assertEqual(data['E1'],'chr')
        self.assertEqual(data['F1'],'abs_summit-100')
        self.assertEqual(data['G1'],'abs_summit+100')
        self.assertEqual(data['H1'],'chr')
        self.assertEqual(data['I1'],'summit-1')
        self.assertEqual(data['J1'],'summit')
        self.assertEqual(data['K1'],'length')
        self.assertEqual(data['L1'],'abs_summit')
        self.assertEqual(data['M1'],'pileup')
        self.assertEqual(data['N1'],'-log10(pvalue)')
        self.assertEqual(data['O1'],'fold_enrichment')
        self.assertEqual(data['P1'],'-log10(qvalue)')
        # Check first line of data
        self.assertEqual(data['A2'],1)
        self.assertEqual(data['B2'],'chr1')
        self.assertEqual(data['C2'],6214126)
        self.assertEqual(data['D2'],6215036)
        self.assertEqual(data.render_cell('E2'),'=B2')
        self.assertEqual(data.render_cell('F2'),'=L2-100')
        self.assertEqual(data.render_cell('G2'),'=L2+100')
        self.assertEqual(data.render_cell('H2'),'=B2')
        self.assertEqual(data.render_cell('I2'),'=L2-1')
        self.assertEqual(data.render_cell('J2'),'=L2')
        self.assertEqual(data['K2'],911)
        self.assertEqual(data['L2'],6214792)
        self.assertEqual(data['M2'],56.00)
        self.assertEqual(data['N2'],47.04091)
        self.assertEqual(data['O2'],12.64636)
        self.assertEqual(data['P2'],43.11036)
        # Check last line of data
        self.assertEqual(data['A6'],5)
        self.assertEqual(data['B6'],'chr1')
        self.assertEqual(data['C6'],4858211)
        self.assertEqual(data['D6'],4858495)
        self.assertEqual(data.render_cell('E6'),'=B6')
        self.assertEqual(data.render_cell('F6'),'=L6-100')
        self.assertEqual(data.render_cell('G6'),'=L6+100')
        self.assertEqual(data.render_cell('H6'),'=B6')
        self.assertEqual(data.render_cell('I6'),'=L6-1')
        self.assertEqual(data.render_cell('J6'),'=L6')
        self.assertEqual(data['K6'],285)
        self.assertEqual(data['L6'],4858423)
        self.assertEqual(data['M6'],18.00)
        self.assertEqual(data['N6'],8.17111)
        self.assertEqual(data['O6'],4.21545)
        self.assertEqual(data['P6'],5.55648)
        # Check order of fold enrichment column
        self.assertEqual(data['O2'],12.64636)
        self.assertEqual(data['O3'],7.09971)
        self.assertEqual(data['O4'],6.65598)
        self.assertEqual(data['O5'],4.88105)
        self.assertEqual(data['O6'],4.21545)

    def test_xls_for_macs2_with_2010_20131216_broad(self):
        """Generate XLSWorkBook for MACS2.0.10.20131216 data with --broad option
        """
        macsxls = MacsXLS(fp=io.StringIO(MACS2010_20131216_broad_data))
        xls = xls_for_macs2(macsxls)
        for sheet,title in zip(xls.worksheet,('data','notes','legends')):
            self.assertEqual(sheet,title)
        data = xls.worksheet['data']
        # Check header
        self.assertEqual(data['A1'],'#order')
        self.assertEqual(data['B1'],'chr')
        self.assertEqual(data['C1'],'start')
        self.assertEqual(data['D1'],'end')
        self.assertEqual(data['E1'],'chr')
        self.assertEqual(data['F1'],'length')
        self.assertEqual(data['G1'],'pileup')
        self.assertEqual(data['H1'],'-log10(pvalue)')
        self.assertEqual(data['I1'],'fold_enrichment')
        self.assertEqual(data['J1'],'-log10(qvalue)')
        # Check first line of data
        self.assertEqual(data['A2'],1)
        self.assertEqual(data['B2'],'chr1')
        self.assertEqual(data['C2'],6214118)
        self.assertEqual(data['D2'],6215462)
        self.assertEqual(data.render_cell('E2'),'=B2')
        self.assertEqual(data['F2'],1345)
        self.assertEqual(data['G2'],25.10)
        self.assertEqual(data['H2'],15.08276)
        self.assertEqual(data['I2'],5.78500)
        self.assertEqual(data['J2'],12.23221)
        # Check last line of data
        self.assertEqual(data['A6'],5)
        self.assertEqual(data['B6'],'chr1')
        self.assertEqual(data['C6'],4571604)
        self.assertEqual(data['D6'],4572035)
        self.assertEqual(data.render_cell('E6'),'=B6')
        self.assertEqual(data['F6'],432)
        self.assertEqual(data['G6'],11.81)
        self.assertEqual(data['H6'],4.00624)
        self.assertEqual(data['I6'],2.84289)
        self.assertEqual(data['J6'],1.70591)
        # Check order of fold enrichment column
        self.assertEqual(data['I2'],5.78500)
        self.assertEqual(data['I3'],4.45015)
        self.assertEqual(data['I4'],4.28339)
        self.assertEqual(data['I5'],3.82006)
        self.assertEqual(data['I6'],2.84289)

    def test_xls_for_macs2_with_2010_20131216_multiple_sheets(self):
        """Generate XLSWorkBook with data split over multiple sheets

        """
        macsxls = MacsXLS(fp=io.StringIO(MACS2010_20131216_data))
        xls = xls_for_macs2(macsxls,row_limit=4)
        for sheet,title in zip(xls.worksheet,('data','data2','notes','legends')):
            self.assertEqual(sheet,title)
        # Check first sheet
        data = xls.worksheet['data']
        # Check header
        self.assertEqual(data['A1'],'#order')
        self.assertEqual(data['B1'],'chr')
        self.assertEqual(data['C1'],'start')
        self.assertEqual(data['D1'],'end')
        self.assertEqual(data['E1'],'chr')
        self.assertEqual(data['F1'],'abs_summit-100')
        self.assertEqual(data['G1'],'abs_summit+100')
        self.assertEqual(data['H1'],'chr')
        self.assertEqual(data['I1'],'summit-1')
        self.assertEqual(data['J1'],'summit')
        self.assertEqual(data['K1'],'length')
        self.assertEqual(data['L1'],'abs_summit')
        self.assertEqual(data['M1'],'pileup')
        self.assertEqual(data['N1'],'-log10(pvalue)')
        self.assertEqual(data['O1'],'fold_enrichment')
        self.assertEqual(data['P1'],'-log10(qvalue)')
        # Check first line of data in first sheet
        self.assertEqual(data['A2'],1)
        self.assertEqual(data['B2'],'chr1')
        self.assertEqual(data['C2'],6214126)
        self.assertEqual(data['D2'],6215036)
        self.assertEqual(data.render_cell('E2'),'=B2')
        self.assertEqual(data.render_cell('F2'),'=L2-100')
        self.assertEqual(data.render_cell('G2'),'=L2+100')
        self.assertEqual(data.render_cell('H2'),'=B2')
        self.assertEqual(data.render_cell('I2'),'=L2-1')
        self.assertEqual(data.render_cell('J2'),'=L2')
        self.assertEqual(data['K2'],911)
        self.assertEqual(data['L2'],6214792)
        self.assertEqual(data['M2'],56.00)
        self.assertEqual(data['N2'],47.04091)
        self.assertEqual(data['O2'],12.64636)
        self.assertEqual(data['P2'],43.11036)
        # Check order of fold enrichment column in first sheet
        self.assertEqual(data['O2'],12.64636)
        self.assertEqual(data['O3'],7.09971)
        self.assertEqual(data['O4'],6.65598)
        # Check last line of data in second sheet
        data1 = xls.worksheet['data2']
        self.assertEqual(data1['A3'],5)
        self.assertEqual(data1['B3'],'chr1')
        self.assertEqual(data1['C3'],4858211)
        self.assertEqual(data1['D3'],4858495)
        self.assertEqual(data1.render_cell('E3'),'=B3')
        self.assertEqual(data1.render_cell('F3'),'=L3-100')
        self.assertEqual(data1.render_cell('G3'),'=L3+100')
        self.assertEqual(data1.render_cell('H3'),'=B3')
        self.assertEqual(data1.render_cell('I3'),'=L3-1')
        self.assertEqual(data1.render_cell('J3'),'=L3')
        self.assertEqual(data1['K3'],285)
        self.assertEqual(data1['L3'],4858423)
        self.assertEqual(data1['M3'],18.00)
        self.assertEqual(data1['N3'],8.17111)
        self.assertEqual(data1['O3'],4.21545)
        self.assertEqual(data1['P3'],5.55648)
        # Check order of fold enrichment column in second sheet
        self.assertEqual(data1['O2'],4.88105)
        self.assertEqual(data1['O3'],4.21545)

    def test_xls_for_macs2_with_140beta(self):
        """Check 'xls_for_macs2' raises exception for MACS14 data
        """
        macsxls = MacsXLS(fp=io.StringIO(MACS140beta_data))
        self.assertRaises(Exception,xls_for_macs2,macsxls)

class TestBedForMacs2Function(unittest.TestCase):

    def test_bed_for_macs2_with_2010_20130419(self):
        """Generate BED for MACS2.0.10.20130419 data

        """
        macsxls = MacsXLS(fp=io.StringIO(MACS2010_20130419_data))
        bed = bed_for_macs2(macsxls)
        # Check header
        self.assertEqual(bed.header(),['chr',
                                        'abs_summit-100',
                                        'abs_summit+100'])
        # Check first line of data
        self.assertEqual(bed[0]['chr'],'chr1')
        self.assertEqual(bed[0]['abs_summit-100'],11969905-100)
        self.assertEqual(bed[0]['abs_summit+100'],11969905+100)
        # Check last line of data
        self.assertEqual(bed[4]['chr'],'chr1')
        self.assertEqual(bed[4]['abs_summit-100'],11739812-100)
        self.assertEqual(bed[4]['abs_summit+100'],11739812+100)

    def test_bed_for_macs2_with_2010_20131216(self):
        """Generate BED for MACS2.0.10.20131216 data

        """
        macsxls = MacsXLS(fp=io.StringIO(MACS2010_20131216_data))
        bed = bed_for_macs2(macsxls)
        # Check header
        self.assertEqual(bed.header(),['chr',
                                        'abs_summit-100',
                                        'abs_summit+100'])
        # Check first line of data
        self.assertEqual(bed[0]['chr'],'chr1')
        self.assertEqual(bed[0]['abs_summit-100'],6214792-100)
        self.assertEqual(bed[0]['abs_summit+100'],6214792+100)
        # Check last line of data
        self.assertEqual(bed[4]['chr'],'chr1')
        self.assertEqual(bed[4]['abs_summit-100'],4858423-100)
        self.assertEqual(bed[4]['abs_summit+100'],4858423+100)

    def test_bed_for_macs2_with_2010_20131216_broad(self):
        """Check 'bed_for_macs2' raises exception MACS2.0.10.20131216 with --broad option
        """
        macsxls = MacsXLS(fp=io.StringIO(MACS2010_20131216_broad_data))
        self.assertRaises(Exception,
                          bed_for_macs2,
                          macsxls)

    def test_bed_for_macs2_with_140beta(self):
        """Check 'bed_for_macs2' raises exception for MACS14 data
        """
        macsxls = MacsXLS(fp=io.StringIO(MACS140beta_data))
        self.assertRaises(Exception,
                          bed_for_macs2,
                          macsxls)

class TestChunkFunction(unittest.TestCase):
    def test_chunk_no_delimiter(self):
        """Test chunk function with no delimiter
        """
        self.assertEqual(chunk("This is some text",5),
                         ["This ","is so","me te","xt"])
    def test_chunk_with_delimiter(self):
        """Test chunk function with delimiter (space)
        """
        self.assertEqual(chunk("This is some text",8,delimiter=' '),
                         ["This is"," some"," text"])
    def test_chunk_shorter_than_limit(self):
        """Test chunk function when string is shorter than limit
        """
        self.assertEqual(chunk("This is some text",100),
                         ["This is some text"])
